use("core")
use("control-flow")
use("define")
use("therie")

class(ZSuperA):
  test-1 := #super
  test-2(x) := [#super, x]
  test-3 &x := [#super, x call]
  test-4(x = 1) := [#super, x]
  test-5(x = 1) &y := [#super, x, y call]
  test-6(x) := [#super, x]

class(ZSuperB < ZSuperA):
  test-1 := super
  test-2(x) := super
  test-3 &x := super
  test-4(x = 0) := super
  test-5(x = 0) &y := super
  test-6(x) := { super } call

describe("zsuper"):
  it("resends the message to the superclass"):
    ZSuperB new test-1 should-be(#super)

  it("passes the same arguments to the superclass method"):
    ZSuperB new test-2(1) should-be([#super, 1])

  it("passes the block to the superclass method"):
    ZSuperB new test-3: 1; should-be([#super, 1])

  it("sends with the subclass method's defaults"):
    ZSuperB new test-4(2) should-be([#super, 2])
    ZSuperB new test-4 should-be([#super, 0])

  it("handles both defaults and blocks"):
    ZSuperB new test-5(3): 2; should-be([#super, 3, 2])
    ZSuperB new test-5: 2; should-be([#super, 0, 2])

  it("works from inside of a block"):
    ZSuperB new test-6(1) should-be([#super, 1])

class(SuperA):
  test-1 := #super
  test-2(x) := [#super, x]
  test-3 &x := [#super, x call]
  test-4 &x := [#super, x call]
  test-5(x = 1) := [#super, x]
  test-6(x = 1) := [#super, x]
  test-7(x = 1) &y := [#super, x, y call]
  test-8(x) := [#super, x]

class(SuperB < SuperA):
  test-1 := super()
  test-2(x) := super(x + 1)
  test-3 &x := super &x
  test-4 &x := super: x call + 1
  test-5(x = 0) := super(x + 1)
  test-6(x = 0) := super()
  test-7(x = 0) &y := super(x + 1) &y
  test-8(x) := do: super(1)

describe("super"):
  it("resends the message to the superclass"):
    SuperB new test-1 should-be(#super)

  it("passes the same arguments to the superclass method"):
    SuperB new test-2(1) should-be([#super, 2])

  it("passes the block to the superclass method"):
    SuperB new test-3: 1; should-be([#super, 1])
    SuperB new test-4: 1; should-be([#super, 2])

  it("passes a &block to the superclass method"):
    a = { 1 }
    SuperB new test-3 &a should-be([#super, 1])
    SuperB new test-4 &a should-be([#super, 2])

  it("sends with the subclass method's defaults"):
    SuperB new test-5(2) should-be([#super, 3])
    SuperB new test-5 should-be([#super, 1])

  it("assumes superclass's defaults"):
    SuperB new test-6 should-be([#super, 1])

  it("handles both defaults and blocks"):
    SuperB new test-7(3): 2; should-be([#super, 4, 2])
    SuperB new test-7: 2; should-be([#super, 1, 2])

  it("works from inside of a block"):
    SuperB new test-8(0) should-be([#super, 1])
