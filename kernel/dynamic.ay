use("core")
use("define")
use("comparison")
use("control-flow")
use("array")

class(Dynvar):
  initialize(@name, @default) := nil

^Dynvar := Thread current [@name] || @default
Dynvar set(x) := Thread current [@name] = x

macro(dynamic(~n, ~(root = 'nil))):
  names [local]:
    `(do:
        @~n = (~module)::Dynvar new(~(local text), ~root)

        class(<< self):
          attr-reader(#~n))

macro(let(~*bindings) { ~*body }):
  tmps = bindings zip(names(bindings size))

  save =
    `(~tmp = ^~n)
      for([`(~n = ~_), tmp]) in(tmps)

  set =
    `(~n set(~v)) for(`(~n = ~v)) in(bindings)

  restore =
    `(~n set(~tmp)) for([`(~n = ~_), tmp]) in(tmps)

  `(do:
      ~*save
      { ~*set
        ~*body
      } ensuring: ~*restore)
