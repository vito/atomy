use("atomy")

use("doc")
Condition = use("condition")
Pretty = require("pretty")

require("readline")

basic-repl(bnd = TOPLEVEL_BINDING, debug = false) :=
  loop:
    prompt =
      with-restarts(use-prompt(p) -> p):
        signal(#prompt)
        ">> "

    in =
      { Readline readline(prompt)
      } rescue:
        Interrupt: signal(#quit), ""

    in match:
      nil -> signal(#quit)

      "" -> #ok

      String ? (=~ r"^:[[:alnum:]]") ->
        signal(#special(in [1 .. -1]))

      source:
        signal(#input(source))

        try = {
          with-restarts(retry -> try [], abort -> #ok):
            res = Atomy::Compiler eval(source, bnd, "(eval)", 1, debug)
            signal(#evaluated(res))
        }

        try []

    signal(#loop)


class(ReplDebugger):
  class(<< self):
    show-backtrace(e) := do:
      Rubinius::Backtrace backtrace(e backtrace) show println
      debug(e)

    run(e) := do:
      Condition::DefaultDebugger show-error-banner(e)

      with-restarts(backtrace -> show-backtrace(e)):
        debug(e)

    debug(e) := do:
      Condition::DefaultDebugger show-options-for(e)

      { send(#basic-repl) } bind:
        #prompt -> restart(#use-prompt, "[!]> ")

        #special(n ? (=~ r"\d+")) ->
          ^(Condition restarts) [n to-i] invoke

        #quit -> exit(1)

export

repl(history = nil, bnd = nil, debug = false) := do:
  [mod, bnd] = Atomy make-wrapper-module
  mod use("atomy")

  before-mod = Atomy::CodeLoader module
  before-bnd = Atomy::CodeLoader context

  Atomy::CodeLoader module = mod
  Atomy::CodeLoader context = bnd

  when(history && File exists?(history)):
    File open(history, "r") [f]:
      f readlines each [l]:
        Readline::HISTORY << l strip

  sane-history = Array[]

  { let(Condition debugger = ReplDebugger,
        Pretty multiline? = true,
        Pretty colored? = true):
      frame = 0

      { basic-repl(bnd, debug)
      } bind:
        #prompt ->
          restart(#use-prompt, "[" + frame to-s + "]> ")

        #loop ->
          (frame += 1)

        #quit -> exit(0)

        #input(str) -> (sane-history << str)

        #special("h") ->
          ":h\thelp" println

        #evaluated(r) ->
          (text(" =>") <+> r pretty) render(76) println
  } ensuring:
    Atomy::CodeLoader module = before-mod
    Atomy::CodeLoader context = before-bnd

    when(history):
      File open(history, "a") [f]:
        f puts(*sane-history)
