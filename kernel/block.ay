use("core")
use("define")
use("comparison")
use("control-flow")
use("meta")
use("interpolation")

module(Atomy::Patterns):
  class(NamedRedirectedInstance < NamedInstance):
    attr-reader(#target, #identifier)

    initialize(@target, @identifier) := nil

    construct(g) := do:
      get(g)
      @target construct(g)
      g push-literal(@identifier)
      g send(#new, 2)

    (== b) :=
      b kind-of?(NamedRedirectedInstance) &&
        @target == b target &&
        @identifier == b identifier

    deconstruct(g, locals = {}) := do:
      @target compile(g)
      g swap
      g push-literal(name)
      g swap
      g send(#instance-variable-set, 2)
      g pop

  class(NamedRedirectedClass < NamedClass):
    attr-reader(#target, #identifier)

    initialize(@target, @identifier) := nil

    construct(g) := do:
      get(g)
      @target construct(g)
      g push-literal(@identifier)
      g send(#new, 2)

    (== b) :=
      b kind-of?(NamedRedirectedClass) &&
        @target == b target &&
        @identifier == b identifier

    deconstruct(g, locals = {}) := do:
      have-class = g new-label

      @target compile(g)
      g dup
      g push-cpath-top
      g find-const(#Class)
      g kind-of
      g git(have-class)

      g send(#class, 0)

      have-class set!
      g swap
      g push-literal(name)
      g swap
      g send(#class-variable-set, 2)
      g pop


module(Atomy::AST):
  class(RedirectedInstanceVariable < Node):
    children(#target)
    attributes(#name)
    generate

    bytecode(g) := do:
      pos(g)
      @target compile(g)
      g push-literal(#"@#{@name}")
      g send(#instance-variable-get, 1)

    to-pattern :=
      Atomy::Patterns::NamedRedirectedInstance new(@target, @name)

  class(RedirectedClassVariable < Node):
    children(#target)
    attributes(#name)
    generate

    bytecode(g) := do:
      pos(g)
      have-class = g new-label

      @target compile(g)
      g dup
      g push-cpath-top
      g find-const(#Class)
      g kind-of
      g git(have-class)

      g send(#class, 0)

      have-class set!
      g push-literal(#"@@#{@name}")
      g send(#class-variable-get, 1)

    to-pattern :=
      Atomy::Patterns::NamedRedirectedClass new(@target, @name)


macro(~x onto ~(b: Block)):
  names [val]:
    `(do:
        ~val = self
        let-macro(self = '~val):
          { with-variables-of(~val) ~b
          } block call-on-instance(~x))


macro(with-variables-of(~x) ~(b: Block)):
  names [val]:
    body = b contents collect [c]:
      c through-quotes([n]: n match: `@@~_ -> true) [n]:
        n match:
          `@@~(name: Word) ->
            RedirectedClassVariable new(n line, val, name text)

          `@~(name: Word) ->
            RedirectedInstanceVariable new(n line, val, name text)

          _ -> n

    `(do: ~val = ~x, ~*body)
