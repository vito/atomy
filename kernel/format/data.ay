namespace(atomy/format)

macro('ast ~(nodes: Block)):
  `(ast(Atomy::AST::Node) ~nodes)

macro(ast(root) ~(nodes: Block)):
  cs = nodes contents map [e]:
    e match:
      `(~(name)(~*args)) -> do:
        children = []
        attributes = []

        args each [a]:
          a match:
            `[@~name] ->
              attributes << `[#~name]

            `@~name ->
              attributes << `#~name

            _ ->
              children << a

        `(class(~name < ~root):
            children(~*children)
            attributes(~*attributes)
            generate)

      _ ->
        `(class(~e < ~root):
            generate)

  when(root != 'Atomy::AST::Node):
    cs unshift(`(class(~root < Atomy::AST::Node) {}))

  `(do: ~*cs)

module(Atomy::Format):
  ast(Segment):
    Chunk([#flags], @text)
    String([#flags])
    Decimal([#flags])
    Hex([#flags])
    Octal([#flags])
    Binary([#flags])
    Radix([#flags])
    Float([#flags])
    Exponent([#flags])
    General([#flags])
    Character([#flags])
    Any([#flags])
    Pluralize(#singular, [#flags], #plural?)
    Lowercase(#content, [#flags])
    Capitalize(#content, [#flags])
    Uppercase(#content, [#flags])
    Justify([#segments], [#flags])
    Skip([#flags])
    Indirection([#flags])
    Iterate(#content, [#flags])
    Break([#flags])
    Conditional([#branches], [#flags], #default?)

  ast(Flag):
    Number(@value?)
    Symbol(@character)
    ZeroPad
    Precision(@value)

  ast:
    Formatter([#segments])

  Segment symbol?(m) :=
    @flags any? [f]:
      f match:
        Symbol -> f character == m
        _ -> false

  Segment precision := do:
    @flags each [f]:
      when(f is-a?(Precision)):
        return(f value)

    nil

  Segment zero-pad? :=
    @flags any? [f]:
      f match:
        ZeroPad -> true
        _ -> false
