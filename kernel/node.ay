use("core")
use("define")

module(Atomy::AST):
  '_ to-pattern :=
    Atomy::Patterns::Any new

  `(~h . ~t) to-pattern :=
    Atomy::Patterns::HeadTail new(h to-pattern, t to-pattern)

  `(~p = ~d) to-pattern :=
    Atomy::Patterns::Default new(p to-pattern, d)

  `(? ~t) to-pattern :=
    Atomy::Patterns::Predicate new(Atomy::Patterns::Any new, t)

  `(~p ? ~t) to-pattern :=
    Atomy::Patterns::Predicate new(p to-pattern, t)

  `(~a & ~b) to-pattern :=
    Atomy::Patterns::And new(a to-pattern, b to-pattern)

  `(~a | ~b) to-pattern :=
    Atomy::Patterns::Or new(a to-pattern, b to-pattern)

  `(~x with(~e, ~y)) to-pattern :=
    Atomy::Patterns::With new(x to-pattern, y to-pattern, e)

  `(with(~e, ~y)) to-pattern :=
    Atomy::Patterns::With new(Atomy::Patterns::Any new, y to-pattern, e)

  `@@~(n: Atomy::AST::Word) to-pattern :=
    Atomy::Patterns::NamedClass new(n text)

  `$0 to-pattern :=
    Atomy::Patterns::NamedGlobal new("0")

  `$exception to-pattern :=
    Atomy::Patterns::NamedGlobal new("!")

  `$path to-pattern :=
    Atomy::Patterns::NamedGlobal new(":")

  `$separator to-pattern :=
    Atomy::Patterns::NamedGlobal new("/")

  `$~(n: Atomy::AST::Constant) to-pattern :=
    Atomy::Patterns::NamedGlobal new(n name)

  `$~(n: Atomy::AST::String) to-pattern :=
    Atomy::Patterns::NamedGlobal new(n value)

  `$~(n: Atomy::AST::Word) to-pattern :=
    Atomy::Patterns::NamedGlobal new(n text)

  `@~(n: Atomy::AST::Word) to-pattern :=
    Atomy::Patterns::NamedInstance new(n text)

  `&~x to-pattern :=
    Atomy::Patterns::BlockPass new(x to-pattern)

  `*~x to-pattern :=
    Atomy::Patterns::Splat new(x to-pattern)

  'self to-pattern :=
    Atomy::Patterns::Match new(#self)

  'true to-pattern :=
    Atomy::Patterns::Match new(#true)

  'false to-pattern :=
    Atomy::Patterns::Match new(#false)

  'nil to-pattern :=
    Atomy::Patterns::Match new(#nil)

  `#~(x: Atomy::AST::Word) to-pattern :=
    Atomy::Patterns::Literal new(x text)

  `#~(x: Atomy::AST::Constant) to-pattern :=
    Atomy::Patterns::Literal new(x name)

  `#~(x: Atomy::AST::String) to-pattern :=
    Atomy::Patterns::Literal new(x value to-sym)
