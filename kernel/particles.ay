namespace(atomy)

for-macro:
  wildcard('_) := '_undefined
  wildcard(x) := x

macro(#`(~r ~(x)(~*as))):
  `(Particle [
      ~(if(@receiver headless)
          then: '_undefined
          else: wildcard(r))
      #~x
      ~*(as collect [c]: wildcard(c))
    ])

macro(#(x: BinarySend)):
  `(Particle [
      ~(if(x private)
          then: '_undefined
          else: wildcard(x lhs))
      #~(x operator)
      ~(wildcard(x rhs))
    ])

export:
  `#(~r ~(x)(~*as)) pattern :=
    Atomy::Patterns::List new $:
      [ if(@receiver headless)
          then: '_ pattern
          else: r pattern
        `#~x pattern
      ] + as collect(&#pattern)

export:
  class(Particle < Array):
    call(*args) := to-proc [*args]

    to-proc := [*args]:
      x = dup

      args each [a]:
        idx = x find-index [a]:
          a equal?(_undefined)

        when(idx):
          x [idx] = a

      x first send(*(x drop(1)))

    arity :=
      select(&#equal?(_undefined)) size

    receiver := at(0)

    message := at(1)

    arguments := drop(2)

class(Symbol):
  call(*args) := to-proc [*args]

  arity := 1
